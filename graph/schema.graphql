# schema.graphql
extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.0", import: ["@key"])

input SeedInput {
  std: Float!
  mean: Float!
  min: Float!
  max: Float!
}

input TargetConfigInput {
  min: Float!
  max: Float!
}

input SyntheticSamplePropsInput {
  sampleSeed: SeedInput!
  size: Int!
  config: TargetConfigInput!
}

enum SessionMode {
  SUM
  SET
}

enum BowType {
  RECURVE
  COMPOUND
  BAREBOW
}

enum TimerMode {
  LOOP
  TOTAL
}

union Archer = User | Enemy

type Seed {
  std: Float!
  mean: Float!
  min: Float!
  max: Float!
}

type Authenticates @relationshipProperties {
  id: String!
}

type AtTarget @relationshipProperties {
  distance: Int!
}

type EnemySession @relationshipProperties {
  name: String!
  mod: Float! @default(value: 1)
  adaptive: Boolean! @default(value: false)
  seed: Seed!
}

type GenerationProperties @relationshipProperties {
  mean: Float!
  max: Float!
  min: Float!
  std: Float!
}

type User {
  id: ID! @id
  authenicator: Authenicator!
    @relationship(
      type: "AUTHENTICATES"
      properties: "Authenticates"
      direction: IN
    )
  sessions: [Session!]! @relationship(type: "PARTICIPATES_IN", direction: OUT)
  bows: [Bow!]! @relationship(type: "OWNS", direction: OUT)
  arrows: [Arrow!]! @relationship(type: "SHOOTS", direction: OUT)
  ends: [End!]! @relationship(type: "SHOOTS", direction: OUT)
}

type Authenicator {
  id: ID! @id
  name: String!
  users: [User!]!
    @relationship(
      type: "AUTHENTICATES"
      properties: "Authenticates"
      direction: OUT
    )
}

type SyntheticSampleResponse {
  message: String!
  sample: [Float!]!
  seed: Seed!
}

type Bow {
  id: ID! @id
  type: BowType!
  model: String!
  brand: String!
  owner: User! @relationship(type: "OWNS", direction: IN)
}

type Target {
  id: ID! @id
  type: String!
  rings: Int!
  size: Int!
  arrows: [Arrow!]!
    @relationship(type: "AT", direction: IN, properties: "AtTarget")
  ends: [End!]! @relationship(type: "AT", direction: IN, properties: "AtTarget")
}

type End {
  id: ID! @id
  number: Int!
  shootoff: Boolean! @default(value: false)
  arrows: [Arrow!]! @relationship(type: "DURING", direction: IN)
  session: Session! @relationship(type: "DURING", direction: IN)
  archer: Archer! @relationship(type: "SHOOTS", direction: IN)
  target: Target!
    @relationship(type: "AT", direction: OUT, properties: "AtTarget")
}

type Arrow {
  id: ID! @id
  angle: Float
  offset: Float
  end: End! @relationship(type: "DURING", direction: OUT)
  target: Target!
    @relationship(type: "AT", direction: OUT, properties: "AtTarget")
  archer: Archer! @relationship(type: "SHOOTS", direction: IN)
}

type Ruleset {
  id: ID! @id
  arrowsPerEnd: Int!
  timePerArrow: Int!
  timer: TimerMode! @default(value: TOTAL)
  mode: SessionMode! @default(value: SUM)
  discipline: BowType! @default(value: RECURVE)
}

type Session {
  id: ID! @id
  name: String!
  date: Int!
  enemies: [Enemy!]!
    @relationship(
      type: "PARTICIPATES_IN"
      properties: "EnemySession"
      direction: IN
    )
  users: [User!]! @relationship(type: "PARTICIPATES_IN", direction: IN)
  ends: [End!]! @relationship(type: "DURING", direction: OUT)
  ruleset: Ruleset! @relationship(type: "USES", direction: OUT)
  active: Boolean! @default(value: false)
}

type Enemy {
  id: ID! @id
  arrows: [Arrow!]!
    @relationship(
      type: "SHOOTS"
      direction: OUT
      properties: "GenerationProperties"
    )
  sessions: [Session!]!
    @relationship(
      type: "PARTICIPATES_IN"
      direction: OUT
      properties: "EnemySession"
    )
  ends: [End!]! @relationship(type: "SHOOTS", direction: OUT)
}

type Mutation {
  synthesize(payload: SyntheticSamplePropsInput!): SyntheticSampleResponse!
}
